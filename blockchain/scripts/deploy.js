const { ethers } = require("hardhat");

async function main() {
  console.log("Deploying FederatedLearningAudit contract...");

  // Get the ContractFactory and Signers here.
  const [deployer] = await ethers.getSigners();

  console.log("Deploying contracts with the account:", deployer.address);
  console.log("Account balance:", (await ethers.provider.getBalance(deployer.address)).toString());

  // Deploy the FederatedLearningAudit contract
  const FederatedLearningAudit = await ethers.getContractFactory("FederatedLearningAudit");
  const federatedLearningAudit = await FederatedLearningAudit.deploy();

  await federatedLearningAudit.waitForDeployment();

  const contractAddress = await federatedLearningAudit.getAddress();
  console.log("FederatedLearningAudit deployed to:", contractAddress);

  // Save the contract address and ABI for the client applications
  const fs = require("fs");
  const contractInfo = {
    address: contractAddress,
    abi: JSON.parse(federatedLearningAudit.interface.formatJson())
  };

  // Create deployments directory if it doesn't exist
  const deploymentsDir = "./deployments";
  if (!fs.existsSync(deploymentsDir)) {
    fs.mkdirSync(deploymentsDir);
  }

  // Save deployment info
  fs.writeFileSync(
    `${deploymentsDir}/FederatedLearningAudit.json`,
    JSON.stringify(contractInfo, null, 2)
  );

  console.log("Contract deployment information saved to deployments/FederatedLearningAudit.json");

  // Generate configuration for Python clients
  const pythonConfig = `# FedBlock Blockchain Configuration
# Auto-generated by deployment script

BLOCKCHAIN_CONFIG = {
    'contract_address': '${contractAddress}',
    'network_url': 'http://127.0.0.1:8545',  # Local hardhat network
    'chain_id': 1337,
    'gas_limit': 6721975,
    'gas_price': 20000000000  # 20 gwei
}

CONTRACT_ABI = ${JSON.stringify(contractInfo.abi, null, 4)}
`;

  fs.writeFileSync(`${deploymentsDir}/blockchain_config.py`, pythonConfig);
  console.log("Python configuration saved to deployments/blockchain_config.py");

  return contractAddress;
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main()
  .then((contractAddress) => {
    console.log(`\nâœ… Deployment completed successfully!`);
    console.log(`ðŸ“„ Contract Address: ${contractAddress}`);
    console.log(`ðŸ”— You can now integrate this address into your FedBlock clients`);
    process.exit(0);
  })
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
